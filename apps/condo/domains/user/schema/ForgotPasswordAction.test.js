/**
 * Generated by `createschema user.ForgotPasswordAction 'user:Relationship:User:CASCADE; token:Text; requestedAt:DateTimeUtc; expiresAt:DateTimeUtc; usedAt:DateTimeUtc;'`
 */

const { makeLoggedInClient } = require('@condo/domains/user/utils/testSchema')
const { makeLoggedInAdminClient, makeClient } = require('@core/keystone/test.utils')

const { ForgotPasswordAction, createTestForgotPasswordAction, updateTestForgotPasswordAction, createTestUser } = require('@condo/domains/user/utils/testSchema')

const { START_PASSWORD_RECOVERY_MUTATION, CHANGE_PASSWORD_WITH_TOKEN_MUTATION, CHECK_PASSWORD_RECOVERY_TOKEN } = require('@condo/domains/user/gql')

describe('ForgotPasswordAction', () => {
    describe('Anonymous', () => {
        it('cant create', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()
            try {
                await createTestForgotPasswordAction(client, user)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        it('cant read', async () => {
            const client = await makeClient()

            try {
                await ForgotPasswordAction.getAll(client)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['objs'],
                })
                expect(e.data).toEqual({ 'objs': null })
            }
        })

        it('cant update', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            const usedAt = new Date(Date.now()).toISOString()

            try {
                await updateTestForgotPasswordAction(client, objCreated.id, { usedAt })
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })

        it('cant delete', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()

            const [objCreated] = await createTestForgotPasswordAction(admin, user)
            try {
                await ForgotPasswordAction.delete(client, objCreated.id)
            } catch (e) {
                expect(e.errors[0]).toMatchObject({
                    'message': 'You do not have access to this resource',
                    'name': 'AccessDeniedError',
                    'path': ['obj'],
                })
                expect(e.data).toEqual({ 'obj': null })
            }
        })
    })
})

describe('ForgotPasswordAction Service', () => {
    describe('Anonymous', () => {
        it('can create forgot password recovery action', async () => {
            const admin = await makeLoggedInAdminClient()
            const [, userAttrs] = await createTestUser(admin)
            const client = await makeClient()
            const result = await client.mutate(START_PASSWORD_RECOVERY_MUTATION, {
                data: { email: userAttrs.email, dv: 1, sender: { dv: 1, fingerprint: 'tests' } },
            })
            expect(result.data.result).toEqual({ status: 'ok' })
        })

        it('can change password', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user, userAttrs] = await createTestUser(admin)
            const client = await makeClient()

            const [{ token }] = await createTestForgotPasswordAction(admin, user)
            const password = `new_${userAttrs.password}`
            const result = await client.mutate(CHANGE_PASSWORD_WITH_TOKEN_MUTATION, { data: { token, password } })
            expect(result.data.result).toEqual({ status: 'ok' })

            const newClient = await makeLoggedInClient({ email: userAttrs.email, password })
            expect(newClient.user.id).toEqual(user.id)
        })

        it('can check token expired status', async () => {
            const admin = await makeLoggedInAdminClient()
            const [user] = await createTestUser(admin)
            const client = await makeClient()

            const [{ token }] = await createTestForgotPasswordAction(admin, user)
            const result = await client.mutate(CHECK_PASSWORD_RECOVERY_TOKEN, { data: { token } })
            expect(result.data.result).toEqual({ status: 'ok' })
        })
    })
})
